Execution time at 1000000 items
Method accepting               single item    IEnumerable<T>
* Reflection                   0.325145 sec.  0.316571 sec.
* Switch                       0.082234 sec.  0.080049 sec.
* Tree                         0.093092 sec.  0.086470 sec.
* Dictionary                   0.108905 sec.  0.087520 sec.
* If                           0.152830 sec.  0.089500 sec.
* Direct method call           0.038854 sec.  0.038222 sec.
* Direct method call 2         0.037595 sec.  0.036793 sec.
* Direct method call 3         0.037569 sec.  0.037927 sec.
* Direct value access          0.034860 sec.  0.034375 sec.

- Conclusions:
    * {typeof(T).IsInstanceOfType(target)} is much slower than {target is T} (the former not presented)

    * Checking type via {target is T} makes up  contributes ~5% of the fastest implementation to date (if-based method selection). 
      Consider removing type check and rely on consumer to supply correct objects or eal with the consequences.

    * Using switch is not faster than dictionary search, even if it seemed that way initially.

    * Selecting methods with a chain of ifs can be faster than either dictionary search or switch,
      depending on number of alternatives we have to check before we land on the right one.
      The time evens out at about 7(?) checks. In this case, with <15 properties to handle,
      average number of checked alternatives will be at 7 or below and average execution time will be on par with dictionary or better.
      Consider using adaptive generation:
        for target types with low number of properties generate if-based implementation;
        for target types with higher no. or properties generate dictionary-based implementation.
      If we could predict how often each particular property will be requested and order the if-statements accordingly, 
      it could significantly improve average times.

    * Notice how Direct value access is twice as fast as Method call 3, which does the same thing 
      and only differs by the need to call 1 method and return its result.
      
    * All in all, the slowest part in all non-reflection implementations is the need to locate appropriate method based on the property field.
      This part makes up the difference between the three full implementations (Dictionary/Switch/If) 
      and Direct method call (or Direct method call 2 once type checks removed from the generated accessors).
      
    * Assuming how expensive it is to locate generated methods, doing so for each property is not optimal in situations when multiple 
      properties need to be processed together (e.g. when updating one object with properties from another one). For those applications
      it will be more effective to generate a method that will process all properties in sequence and call it once.

      Moreover, for situations when a collection of objects needs to be processed in a batch, it will be best to generate a method that accepts 
      the whole collection and loops through it and call it once, rather than call the same method for each object.

    * Using for tests faux-IEnumerable that returns the same object multiple times leads to strange results that don't correlate to results on a List<T>.

    * Using large number of test objects uses up all available memory and slows down the system distorting results

    * Surprisingly, with methods accepting collection of targets, if-based implementation gives smaller advantage over other implementations than
      with methods using single target, even if the requestd property is listed first.
      

TODO: try replacing 'foreach' with 'while(MoveNext())' or 'for'


- Implementations:
    
    * Reflection
	    item = target.GetType().GetProperty("Item").GetValue(target);

    * Roslyn_Dictionary
        //generated
        public class RoslynAccessor
        {
            public RoslynAccessor()
            {
                Getters["Item"] = GetItem;
            }
            ...
	        public object Get(object target, string propertyName)
            {
                if (!Getters.TryGetValue(propertyName, out Func<object, object> getter))
                {
                    throw new NotSupportedException();
                }

                return getter(target);
            }
            ...
            public static object GetItem(object target)
            {
                if (target is Sigma.Prop.Workbench.TestClass)
                    return ((Sigma.Prop.Workbench.TestClass)target).Item;
                return default;
            }
        }

        // TEST
        item = accessor.Get(target, "Item");


    * Roslyn_Switch
        //generated
        public class RoslynAccessor
        {
            ...
            public object Get(object target, string propertyName)
            {
                switch (propertyName)
                {
                    case "Item": return GetItem(target);
                    case "Id": return GetId(target);
                    case "Text": return GetText(target);
                    case "Value": return GetValue(target);
                    case "Comments": return GetComments(target);
                    case "Tidbits": return GetTidbits(target);
                    case "SomethingComplex": return GetSomethingComplex(target);
                    default: return default;
                }
            }
            ...
            public static object GetItem(object target)
            {
                if (target is Sigma.Prop.Workbench.TestClass)
                    return ((Sigma.Prop.Workbench.TestClass)target).Item;
                return default;
            }
        }

        // TEST
        item = accessor.Get(target, "Item");


    * Roslyn_If   
        //generated
        public class RoslynAccessor
        {
            ...
            public object Get(object target, string propertyName)
            {
                    if (propertyName == "Item") return GetItem(target);
                    if (propertyName == "Id") return GetId(target);
                    if (propertyName == "Text") return GetText(target);
                    if (propertyName == "Value") return GetValue(target);
                    if (propertyName == "Comments") return GetComments(target);
                    if (propertyName == "Tidbits") return GetTidbits(target);
                    if (propertyName == "SomethingComplex") return GetSomethingComplex(target);
                    return default;
            }
            ...
            public static object GetItem(object target)
            {
                if (target is Sigma.Prop.Workbench.TestClass)
                    return ((Sigma.Prop.Workbench.TestClass)target).Item;
                return default;
            }
        }

        // TEST
        item = accessor.Get(target, "Item");


    * Roslyn_Tree
        same as Roslyn_Dictionary, but storing method mappings in SortedDictionary which is based on a red-black tree

    * Method call
        public class RoslynAccessor
        {
            ...
            public static object GetItem(object target)
            {
                if (target is Sigma.Prop.Workbench.TestClass)
                    return ((Sigma.Prop.Workbench.TestClass)target).Item;
                return default;
            }

            public static object GetItem2(object target)
            {
                return ((Sigma.Prop.Workbench.TestClass)target).Item;
            }

            public static object GetItem3(TestClass target)
            {
                return target.Item;
            }
        }
        ...
        item = RoslynAccessor.GetItem(target);
        item = RoslynAccessor.GetItem2(target);
        item = RoslynAccessor.GetItem3(target);


    * Direct value access  
        item = target.Item;
